/**
*@author ： sumin	
*@date   :  2017 - 6 -19
*/
2017-6-19 :  begin write this note 

1.	learn the mode —— MVVM		----------------------------------------------------------------------------------------------
		<layout>
			<data>
				<variable type="com.sumin.bean.User" name="user"></variable> 
			</data>
			<root-layout>
				......
			</root-layout>
		</layout>

2017-6-20 ： 		
2.  public class Bean extends BaseObservable(“绑定UI实时更新”){

		private String username;
		
		@Bindable	//可刷新的注解
		public String getUsername() {
			return username;
		}
		
		public void setUsername(String username) {
			this.username = username;
			notifyPropertyChanged(BR.username);//通知属性值发生改变更新UI
		}
	
	}
	
	xml： <EditText
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="text"
            android:text="@={user.username}" />   =====>> @=  “双向绑定”
			
	otherway to change the value of user.username , edittext will change synchronously;
			
3.	code in activity：
	private ActivityLoginBinding binding;
	binding = DataBindingUtil.setContentView(this, R.layout.activity_login); //ActivityLoginBinding 该类型对象自动生成
	binding.setUser(user); 			
	binding.setXXX XXX是由布局文件中声明的name关联，首字母改大写，例如：
	<variable type="com.sumin.bean.User" name="user2"></variable>  binding.setUser2(User user2); 类型对应Bean类
	当一个页面绑定多个User时，根据name区分
	
4. 获取一个绑定对象 binding.getUser(); 不同的方法对同一个引用进行修改，不需要声明为成员变量，通过binding获取即可。
	public void init(){
		...
		User user = new User();
		user.setUserName("zansang");
		binding.setUser(user);
		...
	}
	public void otherMethod(){
		binding.getUser().setUserName("lisi");
	}
	
5.	开发步骤： 

	一、开启数据绑定open file —— build.gradle 
		android{
			。。。
			dataBing{
				enable true
			}
		}
	
	二、编写layout文件 与 相应的模型Bean
		
		<layout>			public class Bean extends BaseObservable{
			。。。   			。。。
		</layout>			}
	
	三、数据与模型双向绑定
	
		<EditText
			...
			andriod:text= "@={user.password}"
		>
		
	四、注意：一个Activity只可以绑定一个DataBinding，因为在绑定过程中会执行setContentView，重复绑定会把之前的界面给覆盖了。
		
	
===============================================================================================================================
learn point : android material design  | recyclerview | swiperefreshlayout | android 兼容包

ANDROID MATERIAL DESIGN ：Gradle 配置：  compile 'com.android.support:design:26.0.0-alpha1'

Material Text Input
	优化了EditText ,显示提示在获取焦点时，以动画形式跑到控件上方提示
	
	<android.support.design.widget.TextInputLayout
		android:id="@+id/textinput"
		android:layout_width="match_parent"
		android:layout_height="wrap_content">

		<EditText
			android:id="@+id/edittext"
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:hint="What is your name?" />
	
	</android.support.design.widget.TextInputLayout>
	
	
Floating Action Buttons
	每个按钮都可以用icons和colors很容易地进行自定义。
	
	<android.support.design.widget.FloatingActionButton
		android:id="@+id/fab"
		android:layout_width="wrap_content"
		android:layout_height="wrap_content"
		android:layout_gravity="end|bottom"
		android:layout_margin="16dp"
		android:src="@drawable/ic_fab" />
	
	
NavigationView	
	NavigationView是一个新的部件继承了DrawerLayout的功能。开发者使用这个组件能很容易地添加头布局到drawer 和标记已选择的部分。
	
	<android.support.v4.widget.DrawerLayout      xmlns:android="http://schemas.android.com/apk/res/android"
		xmlns:app="http://schemas.android.com/apk/res-auto"
		android:id="@+id/drawer_layout"
		android:layout_height="match_parent"
		android:layout_width="match_parent"
		android:fitsSystemWindows="true">

		<include layout="@layout/content"/>

		<android.support.design.widget.NavigationView
			android:id="@+id/nav_view"
			android:layout_height="match_parent"
			android:layout_width="wrap_content"
			android:layout_gravity="start"
			android:fitsSystemWindows="true"
			app:headerLayout="@layout/nav_header"
			app:menu="@menu/drawer_view"/>
	</android.support.v4.widget.DrawerLayout>
		

Snackbar 	
	Snackbar 比Toast功能有所增强，使用它需要注意的是需要创建一个可以被用来找到应用显示的最底部的View。
	
------------------------------------------------------------------------------------------------------------
2017 -  6 - 21

		
	
	