/**
*@author ： sumin	
*@date   :  2017 - 6 -19
*/
2017-6-19 :  begin write this note 

1.	learn the mode —— MVVM		----------------------------------------------------------------------------------------------
		<layout>
			<data>
				<variable type="com.sumin.bean.User" name="user"></variable> 
			</data>
			<root-layout>
				......
			</root-layout>
		</layout>

2017-6-20 ： 		
2.  public class Bean extends BaseObservable(“绑定UI实时更新”){

		private String username;
		
		@Bindable	//可刷新的注解
		public String getUsername() {
			return username;
		}
		
		public void setUsername(String username) {
			this.username = username;
			notifyPropertyChanged(BR.username);//通知属性值发生改变更新UI
		}
	
	}
	
	xml： <EditText
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="text"
            android:text="@={user.username}" />   =====>> @=  “双向绑定”
			
	otherway to change the value of user.username , edittext will change synchronously;
			
3.	code in activity：
	private ActivityLoginBinding binding;
	binding = DataBindingUtil.setContentView(this, R.layout.activity_login); //ActivityLoginBinding 该类型对象自动生成
	binding.setUser(user); 			
	binding.setXXX XXX是由布局文件中声明的name关联，首字母改大写，例如：
	<variable type="com.sumin.bean.User" name="user2"></variable>  binding.setUser2(User user2); 类型对应Bean类
	当一个页面绑定多个User时，根据name区分
	
4. 获取一个绑定对象 binding.getUser(); 不同的方法对同一个引用进行修改，不需要声明为成员变量，通过binding获取即可。
	public void init(){
		...
		User user = new User();
		user.setUserName("zansang");
		binding.setUser(user);
		...
	}
	public void otherMethod(){
		binding.getUser().setUserName("lisi");
	}
	
5.	开发步骤： 

	一、开启数据绑定open file —— build.gradle 
		android{
			。。。
			dataBing{
				enable true
			}
		}
	
	二、编写layout文件 与 相应的模型Bean
		
		<layout>			public class Bean extends BaseObservable{
			。。。   			。。。
		</layout>			}
	
	三、数据与模型双向绑定
	
		<EditText
			...
			andriod:text= "@={user.password}"
		>
		
	
		